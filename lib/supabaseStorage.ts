import { supabase } from "./supabaseClient"
import { v4 as uuidv4 } from "uuid"

// نوع بيانات الملف المخزن في قاعدة بيانات Supabase
export interface StoredSupabaseFileMetadata {
  id: string // UUID generated by us or Supabase
  supabase_path: string // المسار داخل Supabase Storage (e.g., 'logo/uuid-filename.png')
  file_name: string // اسم الملف الأصلي
  file_type: string // 'logo' or 'pdf'
  file_size: number
  mime_type?: string
  public_url: string // الرابط العام للملف في Supabase Storage
  created_at: string // تاريخ الرفع
  // يمكن إضافة حقول أخرى مثل user_id إذا لزم الأمر
}

// مخزن بيانات باستخدام Supabase Storage وقاعدة بيانات Supabase
class SupabaseFileStorage {
  private bucketName = "worldcosts-files" // اسم الـ bucket في Supabase
  private tableName = "files" // اسم جدول بيانات الملفات الوصفية في قاعدة بيانات Supabase

  // الحصول على جميع الملفات
  async getAllFiles(): Promise<StoredSupabaseFileMetadata[]> {
    const { data, error } = await supabase
      .from(this.tableName)
      .select("*")
      .order("created_at", { ascending: false })

    if (error) {
      console.error("Error fetching files metadata from DB:", error)
      throw error
    }
    return data || []
  }

  // إضافة ملف جديد
  async addFile(fileData: {
    file: File // كائن الملف المراد رفعه
    fileType: string // 'logo' or 'pdf'
  }): Promise<StoredSupabaseFileMetadata> {
    const { file, fileType } = fileData
    // إنشاء مسار فريد للملف داخل الـ bucket بناءً على النوع والمعرف الفريد والاسم الأصلي
    const uniqueFileName = `${uuidv4()}-${file.name}`
    const supabasePath = `${fileType}/${uniqueFileName}`

    // 1. رفع الملف إلى Supabase Storage
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from(this.bucketName)
      .upload(supabasePath, file)

    if (uploadError) {
      console.error("Error uploading file to Supabase Storage:", uploadError)
      throw uploadError
    }

    // 2. الحصول على الرابط العام للملف المرفوع
    const { data: publicUrlData } = supabase.storage
      .from(this.bucketName)
      .getPublicUrl(supabasePath)

    if (!publicUrlData || !publicUrlData.publicUrl) {
      // محاولة تنظيف الملف إذا فشل الحصول على الرابط العام
      await supabase.storage.from(this.bucketName).remove([supabasePath])
      throw new Error("Failed to get public URL for the uploaded file.")
    }

    // 3. تخزين بيانات الملف الوصفية في قاعدة بيانات Supabase
    const metadata: Omit<StoredSupabaseFileMetadata, "id" | "created_at"> & { id?: string } = {
      // id: uuidv4(), // يمكن توليده هنا أو تركه لـ Supabase لتوليده إذا كان PK
      supabase_path: supabasePath,
      file_name: file.name,
      file_type: fileType,
      file_size: file.size,
      mime_type: file.type,
      public_url: publicUrlData.publicUrl,
    }

    const { data: dbData, error: dbError } = await supabase
      .from(this.tableName)
      .insert(metadata)
      .select()
      .single() // يفترض أن الإدراج يُرجع الصف المُدرج

    if (dbError) {
      console.error("Error saving file metadata to DB:", dbError)
      // محاولة تنظيف الملف من Storage إذا فشل الحفظ في قاعدة البيانات
      await supabase.storage.from(this.bucketName).remove([supabasePath])
      throw dbError
    }

    if (!dbData) {
      // محاولة تنظيف الملف من Storage إذا لم يتم إرجاع بيانات من قاعدة البيانات
      await supabase.storage.from(this.bucketName).remove([supabasePath])
      throw new Error("Failed to save file metadata to DB or retrieve the saved record.")
    }

    // إرجاع بيانات الملف الوصفية المخزنة في قاعدة البيانات
    return dbData as StoredSupabaseFileMetadata
  }

  // الحصول على ملف بواسطة المعرف (معرف قاعدة البيانات)
  async getFileById(id: string): Promise<StoredSupabaseFileMetadata | null> {
    const { data, error } = await supabase
      .from(this.tableName)
      .select("*")
      .eq("id", id)
      .single()

    if (error) {
      if (error.code === "PGRST116") { // Not found
        return null
      }
      console.error("Error fetching file metadata by ID:", error)
      throw error
    }
    return data
  }

  // حذف ملف بواسطة المعرف (معرف قاعدة البيانات)
  async deleteFile(id: string): Promise<boolean> {
    // 1. الحصول على بيانات الملف الوصفية لمعرفة مسار الملف في Storage
    const fileMeta = await this.getFileById(id)
    if (!fileMeta) {
      console.warn(`File metadata not found for ID: ${id}. Cannot delete from storage.`)
      // قد نرغب في محاولة حذف السجل من قاعدة البيانات على أي حال إذا كان موجودًا
      const { error: dbDeleteError } = await supabase.from(this.tableName).delete().eq("id", id)
      return !dbDeleteError // نعتبره ناجحًا إذا لم يكن هناك خطأ في الحذف من قاعدة البيانات
    }

    // 2. حذف الملف من Supabase Storage
    const { error: storageError } = await supabase.storage
      .from(this.bucketName)
      .remove([fileMeta.supabase_path])

    if (storageError) {
      // قد يكون الملف غير موجود بالفعل في Storage، لكننا سنستمر في محاولة حذفه من قاعدة البيانات
      console.warn(`Error deleting file from Supabase Storage (path: ${fileMeta.supabase_path}):`, storageError)
      // لا نلقي خطأ هنا، سنحاول حذف البيانات الوصفية
    }

    // 3. حذف بيانات الملف الوصفية من قاعدة البيانات
    const { error: dbError } = await supabase
      .from(this.tableName)
      .delete()
      .eq("id", id)

    if (dbError) {
      console.error("Error deleting file metadata from DB:", dbError)
      return false // فشل الحذف من قاعدة البيانات يعتبر فشلاً كاملاً
    }

    return true // تم الحذف بنجاح (أو لم يكن موجودًا في الأصل)
  }

  // الحصول على إحصائيات الملفات (من قاعدة البيانات)
  async getFileStats(): Promise<{
    totalFiles: number
    totalSize: number
    byType: Record<string, { count: number; size: number }>
  }> {
    const { data, error } = await supabase
      .from(this.tableName)
      .select("file_type, file_size")

    if (error) {
      console.error("Error fetching file stats from DB:", error)
      throw error
    }

    const stats = {
      totalFiles: data?.length || 0,
      totalSize: data?.reduce((sum, file) => sum + (file.file_size || 0), 0) || 0,
      byType: {} as Record<string, { count: number; size: number }>,
    }

    data?.forEach((file) => {
      const type = file.file_type || "unknown"
      if (!stats.byType[type]) {
        stats.byType[type] = { count: 0, size: 0 }
      }
      stats.byType[type].count += 1
      stats.byType[type].size += file.file_size || 0
    })

    return stats
  }
}

// إنشاء نسخة واحدة من مخزن الملفات الجديد
export const supabaseFileStorage = new SupabaseFileStorage()